xmlforeach(1)
===========

NAME
----
xmlforeach - Read XML from the standard input and run an external program
on each element found by the given XPath expression.

SYNOPSIS
--------
[verse]
'xmlforeach' [-v|-t] [-P <maxprocs>] XPath command [arg [...]]


DESCRIPTION
-----------
This manual page documents manlink:xmlforeach[1].  manlink:xmlforeach[1]
reads XML data from the standard input and executes 'command' with the
list of 'initial arguments' for each XML element found that matches the
'XPath expression'.

The 'command' will receive the contents of the XML element on its
standard input.  For convenience, some environment variables will also
be available with some basic information about the XML element.

The environment variable '$XMLELEMENT' will be set to the name of the
XML element.  Also, if the element has any "simple" children, that is
child elements that contain only text, they will be used to set
environment variables.  For example, if the element contains the child
"<name>myname</name>" then you will find $name in the environment with
the value "myname".

  manlink:xmlforeach[1] exits with the following status:
  0 if it succeeds
  123 if any invocation of 'command' exited with status 1-125
  124 if 'command' exited with status 255
  125 if 'command' is killed by a signal
  126 if 'command' cannot be run
  127 if 'command' is not found
  1 if some other error occurred.

manlink:xmlforeach[1] was inspired by manlink:xargs[1].

OPTIONS
-------
-v::
-t::
        Print the command line on the standard error output before
        executing it.

-P max-procs::
        If this argument is given with a number bigger than 1 then
        manlink:xmlforeach[1] will create up to 'max-procs' child
        processes at a time so that XML elements can potentially be
        processed in parallel.

        If this option is not given then the default value of 1 is used
        which means that the XML elements are processed sequentially.

XPath::
        This is a required argument.  This expression is used by the
        stream parser to find XML elements in the input stream.  The
        details of the XPath language are beyond scope of this manual
        page.

        Assuming that you are familiar with XPath there is something of
        which you should be aware.  Each XPath expression is evaluated
        in the context of a stream parser that has no memory of the
        elements it has already seen and has no visibility into the
        elements which it has not yet seen.

        The consequence of evaluating the XPath expression within the
        stream parser is that only a very narrow view of the entire
        document tree is visible at a time.  Candidate elements will
        always appear to be empty.  Each ancestor element up to the root
        element of the document will appear to have only one child
        element.  This basically means that many XPath expression that
        include a predicate WILL NOT WORK!

        Many other XPath expressions do work.  Those that resemble unix
        filesystem pathnames (e.g. "/path/to/element"), those that begin
        with '//' (e.g. "//element") and even those that use the '|' or
        set union operator do work (e.g. "//element|/path/to/elem" work
        well.

command::
        This is a required argument.  This command will be run for each
        element in the node set found using the 'xpath expression'.  The
        command can read the text of the XML element on the standard
        input stream.

arg::
        Any initial arguments that should be passed to 'command' each
        time it is invoked.

EXAMPLES
--------
Consider the following XML document (saved as 'my.xml').

  <?xml version="1.0"?>
  <root>
    <element>
      <name>first</name>
    </element>
    <element>
      <name>second</name>
    </element>
  </root>

This example illustrates how the content of each XML element is
available to 'command' on the standard input.

  $ cat my.xml | xmlforeach //element cat
  <element>
      <name>first</name>
    </element><element>
      <name>second</name>
    </element>

Now, consider the following script (saved as 'simple.sh')

  #!/bin/sh

  echo $name

This example illustrates the use of the environment variables to get
information about the XML element.

  $ cat my.xml | xmlforeach //element ./simple.sh
  first
  second


SEE ALSO
--------
manlink:xmltsort[1].


Author
------
Written by Carl Baldwin <carl@ecbaldwin.net>


Bugs
---
Probably some.  I'm not aware of any right now.
